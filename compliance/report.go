package compliance

import (
	"bytes"
	"fmt"

	"github.com/fatih/color"
)

// Report is the result for a single validation of a commit.
type Report struct {
	// Rule that generated this report.
	Rule Rule
	// Pass describes if the rule was passed or not.
	Pass bool
	// Code to identify multiple reports generated by the same rule.
	Code string
	// Severity of the report.
	Severity Severity
	// Message text explaining the cause of the report.
	Message string
	// Location that described by the report.
	Location Location
}

func (r Report) String() string {
	buf := bytes.NewBuffer(nil)

	if r.Pass {
		buf.WriteString(color.New(color.FgGreen).Sprintf("PASS"))
	} else {
		buf.WriteString(color.New(color.FgRed).Sprintf("FAIL"))
	}

	s := r.Severity
	if r.Severity == 0 {
		s = r.Rule.Severity()
	}

	buf.WriteString(s.Color().Sprintf("%10s", s))
	fmt.Fprintf(buf, " [%s", r.Rule.ID())
	if r.Code != "" {
		fmt.Fprintf(buf, "|%s", r.Code)
	}

	fmt.Fprintf(buf, "] %s", r.Message)

	if r.Location != nil {
		fmt.Fprintf(buf, " (%s)", r.Location)
	}

	return buf.String()
}
